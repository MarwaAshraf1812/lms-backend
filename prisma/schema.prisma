generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(uuid())
  username    String
  email       String         @unique
  role        Role
  password    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  courses     Course[]
  enrollments Enrollment[]
  ratings     CourseRating[]
  quizzes     QuizSubmission[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model Course {
  id             String   @id @default(uuid())
  title          String
  level          String
  language       String
  description    String
  objectives     String[]
  requirements   String[]
  prerequisites  String[]
  targetAudience String[]

  tags            String[]
  thumbnail       String?
  durationMinutes Int       @default(0)
  price           Float     @default(0)
  discount        Float     @default(0)
  discountEnd     DateTime?
  isFree          Boolean   @default(false)

  hidden Boolean      @default(false)
  status CourseStatus @default(DRAFT)

  rate      Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modules     Module[]
  createdBy   User           @relation(fields: [createdById], references: [id])
  createdById String
  enrollments Enrollment[]
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
  ratings     CourseRating[]
  quizzes     Quiz[]
}

model CourseRating {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Module {
  id            String          @id @default(uuid())
  title         String
  order         Int
  course        Course          @relation(fields: [courseId], references: [id])
  courseId      String
  createdAt     DateTime        @default(now())
  moduleContent ModuleContent[]
}

enum ContentType {
  text
  video
  image
  pdf
}

model ModuleContent {
  id        String      @id @default(uuid())
  type      ContentType
  data      String?
  url       String?
  alt       String?
  title     String?
  module    Module      @relation(fields: [moduleId], references: [id])
  moduleId  String
  createdAt DateTime    @default(now())
}

model Enrollment {
  id     String @id @default(uuid())
  userId String

  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model AIResponse {
  id        String   @id @default(uuid())
  type      String // quiz, summary, etc.
  topic     String?
  prompt    String   @db.Text
  response  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          String     @id @default(uuid())
  title       String
  description String?
  courseId    String
  createdAt   DateTime   @default(now())
  course      Course     @relation(fields: [courseId], references: [id])
  questions   Question[]
  submissions QuizSubmission[]
}

model Question {
  id   String @id @default(uuid())
  text String

  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  options Option[]
  submissions SubmissionAnswer[]
}

model Option {
  id         String   @id @default(uuid())
  questionId String
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
}
model QuizSubmission{
  id        String   @id @default(uuid())
  quizId    String
  studentId    String
  score     Int
  submittedAt DateTime @default(now())
  answers  SubmissionAnswer[]

  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [studentId], references: [id])

  @@unique([quizId, studentId])
}

model SubmissionAnswer {
  id        String   @id @default(uuid())
  submissionId String
  questionId String
  answer    String
  selectedOptionId String

  submission QuizSubmission @relation(fields: [submissionId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@unique([submissionId, questionId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
